[{"metadata":{"name":"es-deviceon","namespace":"default","selfLink":"/api/v1/namespaces/default/configmaps/es-deviceon","uid":"c112cfe9-e4e5-11e9-a1c5-c400ad16bc2d","resourceVersion":"26488357","creationTimestamp":"2019-10-02T07:25:04Z","labels":{"app":"es-deviceon","chart":"es-deviceon-1.0.16","heritage":"Tiller","release":"es-deviceon"}},"data":{"initMongo":"wisepaas = db.getSiblingDB('WISE-PaaS');\nuser = wisepaas.getUsers({usersInfo: 'wisepaas'});\nif (user.length == 0) {\n    wisepaas.createUser(\n        {\n            user: \"wisepaas\",\n            pwd: \"wisepaas\",\n            roles: [\n                {role: \"readWrite\", db: \"WISE-PaaS\"},\n                {role: \"dbAdmin\", db: \"WISE-PaaS\"},\n                {role: \"dbOwner\", db: \"WISE-PaaS\"},\n                {role: \"userAdminAnyDatabase\", db: \"admin\"},\n                {role: \"hostManager\", db: \"admin\"},\n                {role: \"clusterAdmin\", db: \"admin\"}\n            ]\n        }\n    );\n}\n","initPostgres":"DO\n$$\nBEGIN\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_ro_public') THEN\n    CREATE ROLE g_ro_public\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_rw_public') THEN\n    CREATE ROLE g_rw_public\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_deviceon') THEN\n    CREATE ROLE g_deviceon\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_provisioning') THEN\n    CREATE ROLE g_provisioning\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='wisepaas') THEN\n    CREATE ROLE wisepaas\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='deviceon') THEN\n    CREATE ROLE deviceon\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      LOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      PASSWORD 'md591faa0bb1413155566fc0d4db514e8b9'\n      VALID UNTIL 'infinity';\n\n    GRANT g_ro_public TO deviceon;\n    GRANT g_rw_public TO deviceon;\n    GRANT g_deviceon TO deviceon;\n    GRANT g_provisioning TO deviceon;\n    GRANT wisepaas TO deviceon;\n  END IF;\nEND\n$$\n","serverConfig":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cConfiguration\u003e\n  \u003cWebServer\u003e\n    \u003cIP\u003elocalhost\u003c/IP\u003e\n    \u003cHTTPPort\u003e8087\u003c/HTTPPort\u003e\n  \u003c/WebServer\u003e\n  \u003cBrokerServer\u003e\n    \u003cReceive\u003e\n      \u003cType\u003eAMQP\u003c/Type\u003e\n      \u003cIP\u003ees-rabbitmq\u003c/IP\u003e\n      \u003cPort\u003e5672\u003c/Port\u003e\n      \u003cAccount\u003eadmin\u003c/Account\u003e\n      \u003cPassword\u003eRgnWzFLVcJfzB8zTNNtFKA==\u003c/Password\u003e\n      \u003cVhost\u003e/\u003c/Vhost\u003e\n      \u003cTenant\u003e+\u003c/Tenant\u003e\n      \u003cSSLEnable\u003efalse\u003c/SSLEnable\u003e\n    \u003c/Receive\u003e\n    \u003cSend\u003e\n      \u003cType\u003eMQTT\u003c/Type\u003e\n      \u003cIP\u003ees-rabbitmq\u003c/IP\u003e\n      \u003cPort\u003e1883\u003c/Port\u003e\n      \u003cAccount\u003eadmin\u003c/Account\u003e\n      \u003cPassword\u003eRgnWzFLVcJfzB8zTNNtFKA==\u003c/Password\u003e\n      \u003cVhost\u003e/\u003c/Vhost\u003e\n      \u003cTenant\u003eWISE-PaaS\u003c/Tenant\u003e\n      \u003cSSLEnable\u003efalse\u003c/SSLEnable\u003e\n    \u003c/Send\u003e\n    \u003cBrokerType\u003eRABBITMQ\u003c/BrokerType\u003e\n    \u003cAppAuthentication\u003e\n      \u003cAppID\u003e\u003c/AppID\u003e\n      \u003cAppSecret\u003e\u003c/AppSecret\u003e\n    \u003c/AppAuthentication\u003e\n    \u003cQoS\u003e0\u003c/QoS\u003e\n  \u003c/BrokerServer\u003e\n  \u003cDBServer\u003e\n    \u003cSQL\u003e\n      \u003cPostgreSQL\u003e\n        \u003cProperties\u003e\n          \u003cproperty name=\"eclipselink.cache.size.default\" value=\"0\"/\u003e\n          \u003cproperty name=\"eclipselink.logging.level\" value=\"OFF\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.url\" value=\"jdbc:postgresql://es-postgres:5432/wisepaas?currentSchema=deviceon\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.user\" value=\"deviceon\"/\u003e\n          \u003cproperty name=\"eclipselink.cache.shared.default\" value=\"false\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.password\" value=\"Ks4Nh7Daws6nAB+Yz9CKkA==\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.driver\" value=\"org.postgresql.Driver\"/\u003e\n          \u003cproperty name=\"eclipselink.cache.type.default\" value=\"NONE\"/\u003e\n          \u003cproperty name=\"eclipselink.jdbc.cache-statements\" value=\"true\"/\u003e\n        \u003c/Properties\u003e\n      \u003c/PostgreSQL\u003e\n    \u003c/SQL\u003e\n    \u003cNoSQL\u003e\n      \u003cDialect\u003emongo\u003c/Dialect\u003e\n      \u003cMongoDB\u003e\n        \u003cIP\u003ees-mongo\u003c/IP\u003e\n        \u003cPort\u003e27017\u003c/Port\u003e\n        \u003cusername\u003ewisepaas\u003c/username\u003e\n        \u003cPassword\u003eWYOayctZri8m3Af8f7N7hQ==\u003c/Password\u003e\n        \u003cDBName\u003eWISE-PaaS\u003c/DBName\u003e\n        \u003cssl\u003efalse\u003c/ssl\u003e\n      \u003c/MongoDB\u003e\n    \u003c/NoSQL\u003e\n  \u003c/DBServer\u003e\n  \u003cLog4j\u003e\n    \u003cProperties\u003e\n      \u003cproperty name=\"log4j.logger.STDOUT\" value=\"debug, STDOUT\"/\u003e\n      \u003cproperty name=\"log4j.appender.STDOUT\" value=\"org.apache.log4j.ConsoleAppender\"/\u003e\n      \u003cproperty name=\"log4j.appender.STDOUT.layout\" value=\"org.apache.log4j.PatternLayout\"/\u003e\n      \u003cproperty name=\"log4j.appender.STDOUT.layout.ConversionPattern\" value=\"[%d{yyyy-MM-dd hh:mm:ss}][%p][%l]%n%m%n\"/\u003e\n      \u003cproperty name=\"log4j.logger.DB\" value=\"debug, DB\"/\u003e\n      \u003cproperty name=\"log4j.appender.DB\" value=\"org.apache.log4j.jdbc.JDBCAppender\"/\u003e\n      \u003cproperty name=\"log4j.appender.DB.layout\" value=\"org.apache.log4j.PatternLayout\"/\u003e\n      \u003cproperty name=\"log4j.appender.DB.sql\" value=\"INSERT INTO log (level, message, thread, location, class, ts) VALUES ('%p', '%m', '%t', '%l',  '%c', '%d{ yyyy-MM-dd HH:mm:ss.SSS}')\"/\u003e\n    \u003c/Properties\u003e\n  \u003c/Log4j\u003e\n  \u003cDefaultStorage\u003e\n    \u003cStorages\u003e\n      \u003cList\u003e\u003c/List\u003e\n    \u003c/Storages\u003e\n  \u003c/DefaultStorage\u003e\n  \u003cAgentCredential\u003e\n    \u003cBrokerHost\u003e192.168.11.6\u003c/BrokerHost\u003e\n    \u003cEndPoint\u003ehttp://192.168.11.6:8087/rmm/v1/iothub/credential\u003c/EndPoint\u003e\n    \u003cKeyName\u003eaGpuUjNTSVdETXM3Zjl5YXRMaEdKZz09\u003c/KeyName\u003e\n  \u003c/AgentCredential\u003e\n\u003c/Configuration\u003e\n"}},{"metadata":{"name":"es-edgesense","namespace":"default","selfLink":"/api/v1/namespaces/default/configmaps/es-edgesense","uid":"a4eccb6f-e4e8-11e9-a1c5-c400ad16bc2d","resourceVersion":"26491773","creationTimestamp":"2019-10-02T07:45:46Z","labels":{"app":"es-edgesense","chart":"es-edgesense-1.0.16","heritage":"Tiller","release":"es-edgesense"}},"data":{"initMongo":"wisepaas = db.getSiblingDB('WISE-PaaS');\nuser = wisepaas.getUsers({usersInfo: 'wisepaas'});\nif (user.length == 0) {\n    wisepaas.createUser(\n        {\n            user: \"wisepaas\",\n            pwd: \"wisepaas\",\n            roles: [\n                {role: \"readWrite\", db: \"WISE-PaaS\"},\n                {role: \"dbAdmin\", db: \"WISE-PaaS\"},\n                {role: \"dbOwner\", db: \"WISE-PaaS\"},\n                {role: \"userAdminAnyDatabase\", db: \"admin\"},\n                {role: \"hostManager\", db: \"admin\"},\n                {role: \"clusterAdmin\", db: \"admin\"}\n            ]\n        }\n    );\n}\n","initPostgres":"DO\n$$\nBEGIN\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_ro_public') THEN\n    CREATE ROLE g_ro_public\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_rw_public') THEN\n    CREATE ROLE g_rw_public\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_rmm') THEN\n    CREATE ROLE g_rmm\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='g_ota') THEN\n    CREATE ROLE g_ota\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='wisepaas') THEN\n    CREATE ROLE wisepaas\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      NOLOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      VALID UNTIL 'infinity';\n  END IF;\n\n  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='rmm') THEN\n    CREATE ROLE rmm\n    WITH\n      NOSUPERUSER\n      INHERIT\n      NOCREATEROLE\n      NOCREATEDB\n      LOGIN\n      NOREPLICATION\n      NOBYPASSRLS\n      PASSWORD 'md5168f3490345f870ecb4dbbeaaa6d22d8'\n      VALID UNTIL 'infinity';\n\n    GRANT g_ro_public TO rmm;\n    GRANT g_rw_public TO rmm;\n    GRANT g_rmm TO rmm;\n    GRANT g_ota TO rmm;\n    GRANT wisepaas TO rmm;\n  END IF;\nEND\n$$\n","serverConfig":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cConfiguration\u003e\n  \u003cWebServer\u003e\n    \u003cIP\u003elocalhost\u003c/IP\u003e\n    \u003cHTTPPort\u003e8087\u003c/HTTPPort\u003e\n  \u003c/WebServer\u003e\n  \u003cBrokerServer\u003e\n    \u003cReceive\u003e\n      \u003cType\u003eAMQP\u003c/Type\u003e\n      \u003cIP\u003ees-rabbitmq\u003c/IP\u003e\n      \u003cPort\u003e5672\u003c/Port\u003e\n      \u003cAccount\u003eadmin\u003c/Account\u003e\n      \u003cPassword\u003eRgnWzFLVcJfzB8zTNNtFKA==\u003c/Password\u003e\n      \u003cVhost\u003e/\u003c/Vhost\u003e\n      \u003cTenant\u003e+\u003c/Tenant\u003e\n      \u003cSSLEnable\u003efalse\u003c/SSLEnable\u003e\n    \u003c/Receive\u003e\n    \u003cSend\u003e\n      \u003cType\u003eMQTT\u003c/Type\u003e\n      \u003cIP\u003ees-rabbitmq\u003c/IP\u003e\n      \u003cPort\u003e1883\u003c/Port\u003e\n      \u003cAccount\u003eadmin\u003c/Account\u003e\n      \u003cPassword\u003eRgnWzFLVcJfzB8zTNNtFKA==\u003c/Password\u003e\n      \u003cVhost\u003e/\u003c/Vhost\u003e\n      \u003cTenant\u003eWISE-PaaS\u003c/Tenant\u003e\n      \u003cSSLEnable\u003efalse\u003c/SSLEnable\u003e\n    \u003c/Send\u003e\n    \u003cBrokerType\u003eRABBITMQ\u003c/BrokerType\u003e\n    \u003cAppAuthentication\u003e\n      \u003cAppID\u003e\u003c/AppID\u003e\n      \u003cAppSecret\u003e\u003c/AppSecret\u003e\n    \u003c/AppAuthentication\u003e\n    \u003cQoS\u003e0\u003c/QoS\u003e\n  \u003c/BrokerServer\u003e\n  \u003cDBServer\u003e\n    \u003cSQL\u003e\n      \u003cPostgreSQL\u003e\n        \u003cProperties\u003e\n          \u003cproperty name=\"eclipselink.cache.size.default\" value=\"0\"/\u003e\n          \u003cproperty name=\"eclipselink.logging.level\" value=\"OFF\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.url\" value=\"jdbc:postgresql://es-postgres:5432/wisepaas?currentSchema=rmm\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.user\" value=\"rmm\"/\u003e\n          \u003cproperty name=\"eclipselink.cache.shared.default\" value=\"false\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.password\" value=\"5msIhSQ5Ggq7alAAtFcPiQ==\"/\u003e\n          \u003cproperty name=\"javax.persistence.jdbc.driver\" value=\"org.postgresql.Driver\"/\u003e\n          \u003cproperty name=\"eclipselink.cache.type.default\" value=\"NONE\"/\u003e\n          \u003cproperty name=\"eclipselink.jdbc.cache-statements\" value=\"true\"/\u003e\n        \u003c/Properties\u003e\n      \u003c/PostgreSQL\u003e\n    \u003c/SQL\u003e\n    \u003cNoSQL\u003e\n      \u003cDialect\u003emongo\u003c/Dialect\u003e\n      \u003cMongoDB\u003e\n        \u003cIP\u003ees-mongo\u003c/IP\u003e\n        \u003cPort\u003e27017\u003c/Port\u003e\n        \u003cusername\u003ewisepaas\u003c/username\u003e\n        \u003cPassword\u003eWYOayctZri8m3Af8f7N7hQ==\u003c/Password\u003e\n        \u003cDBName\u003eWISE-PaaS\u003c/DBName\u003e\n        \u003cssl\u003efalse\u003c/ssl\u003e\n        \u003cCapped\u003e\n          \u003cEnable\u003efalse\u003c/Enable\u003e\n          \u003cSize\u003e204800\u003c/Size\u003e\n        \u003c/Capped\u003e\n      \u003c/MongoDB\u003e\n    \u003c/NoSQL\u003e\n  \u003c/DBServer\u003e\n  \u003cLog4j\u003e\n    \u003cProperties\u003e\n      \u003cproperty name=\"log4j.logger.STDOUT\" value=\"debug, STDOUT\"/\u003e\n      \u003cproperty name=\"log4j.appender.STDOUT\" value=\"org.apache.log4j.ConsoleAppender\"/\u003e\n      \u003cproperty name=\"log4j.appender.STDOUT.layout\" value=\"org.apache.log4j.PatternLayout\"/\u003e\n      \u003cproperty name=\"log4j.appender.STDOUT.layout.ConversionPattern\" value=\"[%d{yyyy-MM-dd hh:mm:ss}][%p][%l]%n%m%n\"/\u003e\n      \u003cproperty name=\"log4j.logger.DB\" value=\"debug, DB\"/\u003e\n      \u003cproperty name=\"log4j.appender.DB\" value=\"org.apache.log4j.jdbc.JDBCAppender\"/\u003e\n      \u003cproperty name=\"log4j.appender.DB.layout\" value=\"org.apache.log4j.PatternLayout\"/\u003e\n      \u003cproperty name=\"log4j.appender.DB.sql\" value=\"INSERT INTO log (level, message, thread, location, class, ts) VALUES ('%p', '%m', '%t', '%l',  '%c', '%d{ yyyy-MM-dd HH:mm:ss.SSS}')\"/\u003e\n    \u003c/Properties\u003e\n  \u003c/Log4j\u003e\n  \u003cDefaultStorage\u003e\n    \u003cStorages\u003e\n      \u003cList\u003e\u003c/List\u003e\n    \u003c/Storages\u003e\n  \u003c/DefaultStorage\u003e\n  \u003cAgentCredential\u003e\n    \u003cBrokerHost\u003e192.168.11.6\u003c/BrokerHost\u003e\n    \u003cEndPoint\u003ehttp://192.168.11.6:8087/rmm/v1/iothub/credential\u003c/EndPoint\u003e\n    \u003cKeyName\u003eaGpuUjNTSVdETXM3Zjl5YXRMaEdKZz09\u003c/KeyName\u003e\n  \u003c/AgentCredential\u003e\n\u003c/Configuration\u003e\n"}},{"metadata":{"name":"es-minio","namespace":"default","selfLink":"/api/v1/namespaces/default/configmaps/es-minio","uid":"f603cf8d-e0ef-11e9-b1b9-c400ad16bc2d","resourceVersion":"25341446","creationTimestamp":"2019-09-27T06:28:04Z","labels":{"app":"es-minio","chart":"es-minio-2.3.15","heritage":"Tiller","release":"es-minio"}},"data":{"config.json":"{\n  \"version\": \"26\",\n  \"credential\": {\n    \"accessKey\": \"admin\",\n    \"secretKey\": \"advant1cH\"\n  },\n  \"region\": \"us-east-1\",\n  \"worm\": \"off\",\n  \"storageclass\": {\n    \"standard\": \"\",\n    \"rrs\": \"\"\n  },\n  \"cache\": {\n    \"drives\": [],\n    \"expiry\": 90,\n    \"maxuse\": 80,\n    \"exclude\": []\n  },\n  \"notify\": {\n    \"amqp\": {\n      \"1\": {\n        \"enable\": false,\n        \"url\": \"\",\n        \"exchange\": \"\",\n        \"routingKey\": \"\",\n        \"exchangeType\": \"\",\n        \"deliveryMode\": 0,\n        \"mandatory\": false,\n        \"immediate\": false,\n        \"durable\": false,\n        \"internal\": false,\n        \"noWait\": false,\n        \"autoDeleted\": false\n      }\n    },\n    \"nats\": {\n      \"1\": {\n        \"enable\": false,\n        \"address\": \"\",\n        \"subject\": \"\",\n        \"username\": \"\",\n        \"password\": \"\",\n        \"token\": \"\",\n        \"secure\": false,\n        \"pingInterval\": 0,\n        \"streaming\": {\n          \"enable\": false,\n          \"clusterID\": \"\",\n          \"clientID\": \"\",\n          \"async\": false,\n          \"maxPubAcksInflight\": 0\n        }\n      }\n    },\n    \"elasticsearch\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"url\": \"\",\n        \"index\": \"\"\n      }\n    },\n    \"redis\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"address\": \"\",\n        \"password\": \"\",\n        \"key\": \"\"\n      }\n    },\n    \"postgresql\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"connectionString\": \"\",\n        \"table\": \"\",\n        \"host\": \"\",\n        \"port\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"database\": \"\"\n      }\n    },\n    \"kafka\": {\n      \"1\": {\n        \"enable\": false,\n        \"brokers\": null,\n        \"topic\": \"\"\n      }\n    },\n    \"webhook\": {\n      \"1\": {\n        \"enable\": false,\n        \"endpoint\": \"\"\n      }\n    },\n    \"mysql\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"dsnString\": \"\",\n        \"table\": \"\",\n        \"host\": \"\",\n        \"port\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"database\": \"\"\n      }\n    },\n    \"mqtt\": {\n      \"1\": {\n        \"enable\": false,\n        \"broker\": \"\",\n        \"topic\": \"\",\n        \"qos\": 0,\n        \"clientId\": \"\",\n        \"username\": \"\",\n        \"password\": \"\",\n        \"reconnectInterval\": 0,\n        \"keepAliveInterval\": 0\n      }\n    }\n  }\n}","initialize":"#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(/usr/bin/mc ls myminio/$BUCKET \u003e /dev/null 2\u003e\u00261)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n\n  # Purge the bucket, if set \u0026 exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      /usr/bin/mc rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    /usr/bin/mc mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  /usr/bin/mc policy $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nconnectToMinio\n# Create the bucket\ncreateBucket images none false"}},{"metadata":{"name":"es-mongo","namespace":"default","selfLink":"/api/v1/namespaces/default/configmaps/es-mongo","uid":"888b6ec4-c247-11e9-90d6-c400ad16bc2d","resourceVersion":"16432537","creationTimestamp":"2019-08-19T06:06:50Z","labels":{"app":"es-mongo","chart":"es-mongo-1.0.8","heritage":"Tiller","release":"es-mongo"}},"data":{"mongod.conf":"net:\n  bindIpAll: true\nsetParameter:\n  enableLocalhostAuthBypass: false\nsecurity:\n  authorization: enabled\n"}},{"metadata":{"name":"es-rabbitmq","namespace":"default","selfLink":"/api/v1/namespaces/default/configmaps/es-rabbitmq","uid":"1d2838f4-cfbd-11e9-89b8-c400ad16bc2d","resourceVersion":"20303720","creationTimestamp":"2019-09-05T09:11:15Z","labels":{"app":"es-rabbitmq","chart":"es-rabbitmq-1.0.9","heritage":"Tiller","release":"es-rabbitmq"}},"data":{"enabled_plugins":"[ rabbitmq_mqtt, rabbitmq_management ].\n","rabbitmq.conf":"#\n# rabbitmq/amqp\n#\ndefault_user = admin\ndefault_pass = advant1cH\nlisteners.tcp.default = 5672\nloopback_users.guest = false\nhipe_compile = false\nlisteners.ssl.default = 5671\nssl_options.cacertfile = /ssl/cacert.pem\nssl_options.certfile = /ssl/cert.pem\nssl_options.keyfile = /ssl/key.pem\nssl_options.fail_if_no_peer_cert = false\nssl_options.verify = verify_peer\n#\n# plugin - management portal\n#\nmanagement.listener.port = 15672\nmanagement.listener.ssl = false\n#\n# plugin - mqtt\n#\nmqtt.default_user = admin\nmqtt.default_pass = advant1cH\nmqtt.allow_anonymous = false\nmqtt.exchange = amq.topic\nmqtt.listeners.tcp.default = 1883\nmqtt.listeners.ssl.default = 8883\n","set_env.sh":"#!/usr/bin/env bash\n\n\necho \"Waiting for RabbitMQ to be ready...\"\nuntil rabbitmqctl -q node_health_check; do\n    echo \"Still waiting...\"\n    sleep 2\ndone\n\n\nset_operator_policy() {\n    local bytes_available=$(df -B1 | grep '/var/lib/rabbitmq' | awk '{ print $4F; }')\n    bytes_available=$(( bytes_available - 4294967296 ))  # 4G as buffer\n\n    local max_length_bytes=$(( bytes_available / 7 ))\n    local max_length=$(( max_length_bytes / 1000 ))\n\n    rabbitmqctl set_operator_policy Q_Limit \".*\" \\\n        \"{'max-length-bytes': ${max_length_bytes}, 'max-length': ${max_length}}\" \\\n        --priority 0 \\\n        --apply-to queues\n}\n\n\nset_memory_high_watermark() {\n    local bytes_available=$(cat /sys/fs/cgroup/memory/memory.limit_in_bytes)\n    local watermark=$(( bytes_available * 4 / 10 ))\n    rabbitmqctl set_vm_memory_high_watermark absolute ${watermark}\n}\n\n\nset_operator_policy\nset_memory_high_watermark\n"}},{"metadata":{"name":"ingress-controller-leader-nginx","namespace":"default","selfLink":"/api/v1/namespaces/default/configmaps/ingress-controller-leader-nginx","uid":"8874d2d5-8b4e-11e9-846a-c400ad16bc2d","resourceVersion":"2819013","creationTimestamp":"2019-06-10T07:08:22Z","annotations":{"control-plane.alpha.kubernetes.io/leader":"{\"holderIdentity\":\"nginx-ingress-controller-76bf4c745c-g8xl6\",\"leaseDurationSeconds\":30,\"acquireTime\":\"2019-06-10T07:08:22Z\",\"renewTime\":\"2019-06-10T07:09:12Z\",\"leaderTransitions\":0}"}}},{"metadata":{"name":"mysql.v2","namespace":"default","selfLink":"/api/v1/namespaces/default/configmaps/mysql.v2","uid":"11782f79-8b4e-11e9-846a-c400ad16bc2d","resourceVersion":"2818503","creationTimestamp":"2019-06-10T07:05:02Z","labels":{"MODIFIED_AT":"1560150303","NAME":"mysql","OWNER":"TILLER","STATUS":"DEPLOYED","VERSION":"2"}},"data":{"release":""}}]